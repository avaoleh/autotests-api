{"uid":"307fc23d351797e4","name":"Get exercises","fullName":"tests.exercises.test_exercises.TestExercises#test_get_exercises","historyId":"2eb4fbc6b63797923e154311c9993d93","time":{"start":1754319659907,"stop":1754319659916,"duration":9},"description":"\n        Тест получения списка заданий по course_id.\n        Выполняет GET-запрос к /api/v1/exercises с параметром courseId.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, создающая одно тестовое задание.\n                               Используется для получения course_id.\n        ","descriptionHtml":"<pre><code>    Тест получения списка заданий по course_id.\n    Выполняет GET-запрос к /api/v1/exercises с параметром courseId.\n    Проверяет статус-код, тело ответа и JSON-схему.\n    :param exercises_client: Клиент для работы с заданиями.\n    :param function_exercise: Фикстура, создающая одно тестовое задание.\n                           Используется для получения course_id.\n</code></pre>\n","status":"broken","statusMessage":"TypeError: object of type 'int' has no len()","statusTrace":"self = <tests.exercises.test_exercises.TestExercises object at 0x7efea14bd5d0>\nexercises_client = <clients.exercises.exercises_client.ExercisesClient object at 0x7efea1047f10>\nfunction_exercise = ExerciseFixture(request=CreateExerciseRequestSchema(title='New moment conference benefit many.', course_id='5aabcb53-4...ormer. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')))\n\n    @allure.tag(AllureTag.GET_ENTITIES)\n    @allure.story(AllureStory.GET_ENTITIES)  # Добавили story\n    @allure.title(\"Get exercises\")\n    @allure.severity(Severity.BLOCKER)\n    @allure.sub_suite(AllureStory.GET_ENTITIES)\n    def test_get_exercises(\n            self,\n            exercises_client: ExercisesClient,\n            function_exercise: ExerciseFixture, # Создает одно задание и обеспечивает course_id\n            # function_course: CourseFixture # Не обязательно, если function_exercise дает нужный course_id\n    ):\n        \"\"\"\n        Тест получения списка заданий по course_id.\n        Выполняет GET-запрос к /api/v1/exercises с параметром courseId.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, создающая одно тестовое задание.\n                               Используется для получения course_id.\n        \"\"\"\n        # 1. Получаем ID курса из созданного задания\n        # Предполагаем, что задание привязано к курсу\n        course_id = function_exercise.request.course_id # Или function_exercise.response.exercise.course_id\n        print(f\"Getting exercises for course ID: {course_id}\")\n    \n        # 2. Формируем параметры запроса\n        # ИСПРАВЛЕНО: Имя параметра должно соответствовать спецификации API - \"courseId\"\n        # ---------------------------------------------------------------\n        query_params = {\"courseId\": course_id}\n        # ---------------------------------------------------------------\n    \n        # 3. Отправляем GET-запрос на получение списка заданий\n        response_api = exercises_client.get_exercises_api(query_params)\n    \n        # 4. Проверяем статус-код ответа\n        assert_status_code(response_api.status_code, HTTPStatus.OK)\n    \n        # 5. Десериализуем JSON-ответ в Pydantic-модель\n        response_data = GetExercisesResponseSchema.model_validate_json(response_api.text)\n    \n        # 6. Проверяем тело ответа\n        # Мы ожидаем, что в списке будет как минимум одно задание,\n        # созданное фикстурой function_exercise.\n        expected_exercises_list = [function_exercise.response.exercise]\n>       assert_get_exercises_response(response_data, expected_exercises_list)\n\ntests/exercises/test_exercises.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/assertions/exercises.py:171: in assert_get_exercises_response\n    assert_length(actual_response.exercises, len(expected_exercises), \"exercises list length\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = [ExerciseSchema(id='93239f67-905b-4fe7-9b3d-2d1642a69f2d', title='New moment conference benefit many.', course_id='5aa...former. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')]\nexpected = 1, name = 'exercises list length'\n\n    def assert_length(actual: Sized, expected: Sized, name: str):\n        \"\"\"\n        Проверяет, что длины двух объектов совпадают.\n    \n        :param name: Название проверяемого объекта.\n        :param actual: Фактический объект.\n        :param expected: Ожидаемый объект.\n        :raises AssertionError: Если длины не совпадают.\n        \"\"\"\n>       with allure.step(f\"Check that length of {name} equals to {len(expected)}\"):\nE       TypeError: object of type 'int' has no len()\n\ntools/assertions/base.py:68: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1754319654184,"stop":1754319654185,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"save_allure_environment_file","time":{"start":1754319654185,"stop":1754319654185,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"public_users_client","time":{"start":1754319658759,"stop":1754319658786,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_user","time":{"start":1754319658787,"stop":1754319659267,"duration":480},"status":"passed","steps":[{"name":"Create user","time":{"start":1754319658787,"stop":1754319659267,"duration":480},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/users'","time":{"start":1754319658787,"stop":1754319659267,"duration":480},"status":"passed","steps":[],"attachments":[{"uid":"8c283fa905da015a","name":"cURL command","source":"8c283fa905da015a.txt","type":"text/plain","size":419}],"parameters":[{"name":"url","value":"'/api/v1/users'"},{"name":"json","value":"{'email': 'amandagilmore@example.org', 'password': '^O4DO#fL$P', 'lastName': 'Powers', 'firstName': 'Mark', 'middleName': 'Wendy'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateUserRequestSchema(email='amandagilmore@example.org', password='^O4DO#fL$P', last_name='Powers', first_name='Mark', middle_name='Wendy')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"exercises_client","time":{"start":1754319659267,"stop":1754319659595,"duration":328},"status":"passed","steps":[{"name":"Authenticate user","time":{"start":1754319659294,"stop":1754319659570,"duration":276},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/authentication/login'","time":{"start":1754319659294,"stop":1754319659570,"duration":276},"status":"passed","steps":[],"attachments":[{"uid":"669e945bd7565cb7","name":"cURL command","source":"669e945bd7565cb7.txt","type":"text/plain","size":373}],"parameters":[{"name":"url","value":"'/api/v1/authentication/login'"},{"name":"json","value":"{'email': 'amandagilmore@example.org', 'password': '^O4DO#fL$P'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"LoginRequestSchema(email='amandagilmore@example.org', password='^O4DO#fL$P')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"courses_client","time":{"start":1754319659595,"stop":1754319659595,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"files_client","time":{"start":1754319659596,"stop":1754319659596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_file","time":{"start":1754319659596,"stop":1754319659607,"duration":11},"status":"passed","steps":[{"name":"Create file","time":{"start":1754319659596,"stop":1754319659607,"duration":11},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/files'","time":{"start":1754319659596,"stop":1754319659607,"duration":11},"status":"passed","steps":[],"attachments":[{"uid":"79cc10c8fc45672a","name":"cURL command","source":"79cc10c8fc45672a.txt","type":"text/plain","size":567}],"parameters":[{"name":"url","value":"'/api/v1/files'"},{"name":"json","value":"None"},{"name":"data","value":"{'filename': '9ff85496-a0cb-4595-a68b-115ffaa56c84.png', 'directory': 'tests'}"},{"name":"files","value":"{'upload_file': <_io.BufferedReader name='./testdata/files/image.png'>}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateFileRequestSchema(filename='9ff85496-a0cb-4595-a68b-115ffaa56c84.png', directory='tests', upload_file='./testdata/files/image.png')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"function_course","time":{"start":1754319659607,"stop":1754319659896,"duration":289},"status":"passed","steps":[{"name":"Create course","time":{"start":1754319659607,"stop":1754319659895,"duration":288},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/courses'","time":{"start":1754319659607,"stop":1754319659895,"duration":288},"status":"passed","steps":[],"attachments":[{"uid":"7a008c52408853b5","name":"cURL command","source":"7a008c52408853b5.txt","type":"text/plain","size":907}],"parameters":[{"name":"url","value":"'/api/v1/courses'"},{"name":"json","value":"{'title': 'Teach prevent two bed.', 'maxScore': 99, 'minScore': 17, 'description': 'Media blue final case. Response again blue road single participant medical.\\nKey current approach. Heavy garden bed leave others.\\nElection mention soon light.', 'estimatedTime': '4 weeks', 'previewFileId': '790da398-614e-4cff-ae49-03277eacc152', 'createdByUserId': '3d83706c-8f65-4dfd-ac2a-17d1590ab39e'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateCourseRequestSchema(title='Teach prevent two bed.', max_score=99, min_score=17, description='Media blue final case. Response again blue road single participant medical.\\nKey current approach. Heavy garden bed leave others.\\nElection mention soon light.', estimated_time='4 weeks', preview_file_id='790da398-614e-4cff-ae49-03277eacc152', created_by_user_id='3d83706c-8f65-4dfd-ac2a-17d1590ab39e')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"function_exercise","time":{"start":1754319659896,"stop":1754319659907,"duration":11},"status":"passed","steps":[{"name":"Create exercise","time":{"start":1754319659896,"stop":1754319659906,"duration":10},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/exercises'","time":{"start":1754319659896,"stop":1754319659906,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"c755507911b5bf78","name":"cURL command","source":"c755507911b5bf78.txt","type":"text/plain","size":824}],"parameters":[{"name":"url","value":"'/api/v1/exercises'"},{"name":"json","value":"{'title': 'New moment conference benefit many.', 'courseId': '5aabcb53-4201-496c-8113-6792996d4f88', 'maxScore': 86, 'minScore': 25, 'orderIndex': 8, 'description': 'Forward end coach former. Eight policy condition even structure go. Only senior sign coach same would exist.', 'estimatedTime': '8 weeks'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateExerciseRequestSchema(title='New moment conference benefit many.', course_id='5aabcb53-4201-496c-8113-6792996d4f88', max_score=86, min_score=25, order_index=8, description='Forward end coach former. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"\n        Тест получения списка заданий по course_id.\n        Выполняет GET-запрос к /api/v1/exercises с параметром courseId.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, создающая одно тестовое задание.\n                               Используется для получения course_id.\n        ","status":"broken","statusMessage":"TypeError: object of type 'int' has no len()","statusTrace":"self = <tests.exercises.test_exercises.TestExercises object at 0x7efea14bd5d0>\nexercises_client = <clients.exercises.exercises_client.ExercisesClient object at 0x7efea1047f10>\nfunction_exercise = ExerciseFixture(request=CreateExerciseRequestSchema(title='New moment conference benefit many.', course_id='5aabcb53-4...ormer. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')))\n\n    @allure.tag(AllureTag.GET_ENTITIES)\n    @allure.story(AllureStory.GET_ENTITIES)  # Добавили story\n    @allure.title(\"Get exercises\")\n    @allure.severity(Severity.BLOCKER)\n    @allure.sub_suite(AllureStory.GET_ENTITIES)\n    def test_get_exercises(\n            self,\n            exercises_client: ExercisesClient,\n            function_exercise: ExerciseFixture, # Создает одно задание и обеспечивает course_id\n            # function_course: CourseFixture # Не обязательно, если function_exercise дает нужный course_id\n    ):\n        \"\"\"\n        Тест получения списка заданий по course_id.\n        Выполняет GET-запрос к /api/v1/exercises с параметром courseId.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, создающая одно тестовое задание.\n                               Используется для получения course_id.\n        \"\"\"\n        # 1. Получаем ID курса из созданного задания\n        # Предполагаем, что задание привязано к курсу\n        course_id = function_exercise.request.course_id # Или function_exercise.response.exercise.course_id\n        print(f\"Getting exercises for course ID: {course_id}\")\n    \n        # 2. Формируем параметры запроса\n        # ИСПРАВЛЕНО: Имя параметра должно соответствовать спецификации API - \"courseId\"\n        # ---------------------------------------------------------------\n        query_params = {\"courseId\": course_id}\n        # ---------------------------------------------------------------\n    \n        # 3. Отправляем GET-запрос на получение списка заданий\n        response_api = exercises_client.get_exercises_api(query_params)\n    \n        # 4. Проверяем статус-код ответа\n        assert_status_code(response_api.status_code, HTTPStatus.OK)\n    \n        # 5. Десериализуем JSON-ответ в Pydantic-модель\n        response_data = GetExercisesResponseSchema.model_validate_json(response_api.text)\n    \n        # 6. Проверяем тело ответа\n        # Мы ожидаем, что в списке будет как минимум одно задание,\n        # созданное фикстурой function_exercise.\n        expected_exercises_list = [function_exercise.response.exercise]\n>       assert_get_exercises_response(response_data, expected_exercises_list)\n\ntests/exercises/test_exercises.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/assertions/exercises.py:171: in assert_get_exercises_response\n    assert_length(actual_response.exercises, len(expected_exercises), \"exercises list length\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = [ExerciseSchema(id='93239f67-905b-4fe7-9b3d-2d1642a69f2d', title='New moment conference benefit many.', course_id='5aa...former. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')]\nexpected = 1, name = 'exercises list length'\n\n    def assert_length(actual: Sized, expected: Sized, name: str):\n        \"\"\"\n        Проверяет, что длины двух объектов совпадают.\n    \n        :param name: Название проверяемого объекта.\n        :param actual: Фактический объект.\n        :param expected: Ожидаемый объект.\n        :raises AssertionError: Если длины не совпадают.\n        \"\"\"\n>       with allure.step(f\"Check that length of {name} equals to {len(expected)}\"):\nE       TypeError: object of type 'int' has no len()\n\ntools/assertions/base.py:68: TypeError","steps":[{"name":"Get exercises","time":{"start":1754319659907,"stop":1754319659915,"duration":8},"status":"passed","steps":[{"name":"Make GET request to '/api/v1/exercises'","time":{"start":1754319659907,"stop":1754319659915,"duration":8},"status":"passed","steps":[],"attachments":[{"uid":"6ca833269778e11f","name":"cURL command","source":"6ca833269778e11f.txt","type":"text/plain","size":499}],"parameters":[{"name":"url","value":"'/api/v1/exercises'"},{"name":"params","value":"{'courseId': '5aabcb53-4201-496c-8113-6792996d4f88'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"query","value":"{'courseId': '5aabcb53-4201-496c-8113-6792996d4f88'}"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equals to <HTTPStatus.OK: 200>","time":{"start":1754319659915,"stop":1754319659915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"200"},{"name":"expected","value":"<HTTPStatus.OK: 200>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check gey exercises response","time":{"start":1754319659915,"stop":1754319659915,"duration":0},"status":"broken","statusMessage":"TypeError: object of type 'int' has no len()\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests-api/autotests-api/tools/assertions/exercises.py\", line 171, in assert_get_exercises_response\n    assert_length(actual_response.exercises, len(expected_exercises), \"exercises list length\")\n  File \"/home/runner/work/autotests-api/autotests-api/tools/assertions/base.py\", line 68, in assert_length\n    with allure.step(f\"Check that length of {name} equals to {len(expected)}\"):\n                                                              ^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual_response","value":"GetExercisesResponseSchema(exercises=[ExerciseSchema(id='93239f67-905b-4fe7-9b3d-2d1642a69f2d', title='New moment conference benefit many.', course_id='5aabcb53-4201-496c-8113-6792996d4f88', max_score=86, min_score=25, order_index=8, description='Forward end coach former. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')])"},{"name":"expected_exercises","value":"[ExerciseSchema(id='93239f67-905b-4fe7-9b3d-2d1642a69f2d', title='New moment conference benefit many.', course_id='5aabcb53-4201-496c-8113-6792996d4f88', max_score=86, min_score=25, order_index=8, description='Forward end coach former. Eight policy condition even structure go. Only senior sign coach same would exist.', estimated_time='8 weeks')]"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9612071e640c2ead","name":"log","source":"9612071e640c2ead.txt","type":"text/plain","size":1460}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"save_allure_environment_file::0","time":{"start":1754319663997,"stop":1754319663997,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"GET_ENTITIES"},{"name":"parentSuite","value":"LMS service"},{"name":"suite","value":"Exercises"},{"name":"severity","value":"blocker"},{"name":"epic","value":"LMS service"},{"name":"subSuite","value":"Get entities"},{"name":"feature","value":"Exercises"},{"name":"tag","value":"EXERCISES"},{"name":"story","value":"Get entities"},{"name":"tag","value":"REGRESSION"},{"name":"tag","value":"regression"},{"name":"tag","value":"exercises"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2560-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.exercises.test_exercises"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"e8ffd95e82d46a00","reportUrl":"https://avaoleh.github.io/autotests-api/1//#testresult/e8ffd95e82d46a00","status":"broken","statusDetails":"AttributeError: 'str' object has no attribute 'read_bytes'","time":{"start":1754319074923,"stop":1754319074923,"duration":0}}]},"tags":["REGRESSION","exercises","regression","GET_ENTITIES","EXERCISES"]},"source":"307fc23d351797e4.json","parameterValues":[]}
{"uid":"235f0f677c55dda9","name":"Update exercise","fullName":"tests.exercises.test_exercises.TestExercises#test_update_exercise","historyId":"444a31133f38814e0e901b5a7503702f","time":{"start":1754319658099,"stop":1754319658110,"duration":11},"description":"\n        Тест обновления данных задания по его ID.\n        Выполняет PATCH-запрос к /api/v1/exercises/{exercise_id}.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, содержащая данные созданного задания.\n        ","descriptionHtml":"<pre><code>    Тест обновления данных задания по его ID.\n    Выполняет PATCH-запрос к /api/v1/exercises/{exercise_id}.\n    Проверяет статус-код, тело ответа и JSON-схему.\n    :param exercises_client: Клиент для работы с заданиями.\n    :param function_exercise: Фикстура, содержащая данные созданного задания.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Incorrect response status code. Expected status code: 200. Actual status code: 500","statusTrace":"self = <tests.exercises.test_exercises.TestExercises object at 0x7f3950ded850>\nexercises_client = <clients.exercises.exercises_client.ExercisesClient object at 0x7f3950e16f90>\nfunction_exercise = ExerciseFixture(request=CreateExerciseRequestSchema(title='Purpose program fly painting.', course_id='a254d770-658d-45...h produce consider college public me assume beat. Be ask west hope man station than whom.', estimated_time='6 weeks')))\n\n    @allure.tag(AllureTag.UPDATE_ENTITY)\n    @allure.story(AllureStory.UPDATE_ENTITY)  # Добавили story\n    @allure.title(\"Update exercise\")\n    @allure.severity(Severity.CRITICAL)\n    @allure.sub_suite(AllureStory.UPDATE_ENTITY)\n    def test_update_exercise(\n            self,\n            exercises_client: ExercisesClient,\n            function_exercise: ExerciseFixture # Используем фикстуру, которая создает задание\n    ):\n        \"\"\"\n        Тест обновления данных задания по его ID.\n        Выполняет PATCH-запрос к /api/v1/exercises/{exercise_id}.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, содержащая данные созданного задания.\n        \"\"\"\n        # 1. Получаем ID задания из фикстуры\n        exercise_id = function_exercise.response.exercise.id\n        print(f\"Updating exercise with ID: {exercise_id}\")\n    \n        # 2. Формируем данные для обновления задания\n        # Обновим, например, title и description\n        update_request = UpdateExerciseRequestSchema(\n            title=\"Новое название задания\",\n            description=\"Новое описание задания\"\n            # Остальные поля остаются None и не будут отправлены в запросе\n            # благодаря exclude_none=True в update_exercise_api\n        )\n        # print(f\"Update request JSON being prepared: {json.dumps(update_request.model_dump(by_alias=True, exclude_none=True), indent=2, ensure_ascii=False)}\")\n        # print(f\"Update request JSON being sent: {json.dumps(update_request.model_dump(by_alias=True), indent=2, ensure_ascii=False)}\")\n    \n        # 3. Отправляем PATCH-запрос на обновление задания\n        # Используем метод, возвращающий httpx.Response\n        response_api = exercises_client.update_exercise_api(exercise_id, update_request)\n        # print(f\"Response status code: {response_api.status_code}\")\n        # print(f\"Response text: {response_api.text}\")\n    \n        # 4. Проверяем статус-код ответа\n>       assert_status_code(response_api.status_code, HTTPStatus.OK)\n\ntests/exercises/test_exercises.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 500, expected = <HTTPStatus.OK: 200>\n\n    @allure.step(\"Check that response status code equals to {expected}\")\n    def assert_status_code(actual: int, expected: int):\n        \"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому.\n    \n        :param actual: Фактический статус-код ответа.\n        :param expected: Ожидаемый статус-код.\n        :raises AssertionError: Если статус-коды не совпадают.\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n    \n>       assert actual == expected, (\n            f'Incorrect response status code. '\n            f'Expected status code: {expected}. '\n            f'Actual status code: {actual}'\n        )\nE       AssertionError: Incorrect response status code. Expected status code: 200. Actual status code: 500\n\ntools/assertions/base.py:17: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1754319654184,"stop":1754319654185,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"save_allure_environment_file","time":{"start":1754319654185,"stop":1754319654185,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"public_users_client","time":{"start":1754319656657,"stop":1754319656679,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_user","time":{"start":1754319656679,"stop":1754319657216,"duration":537},"status":"passed","steps":[{"name":"Create user","time":{"start":1754319656679,"stop":1754319657216,"duration":537},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/users'","time":{"start":1754319656679,"stop":1754319657216,"duration":537},"status":"passed","steps":[],"attachments":[{"uid":"6454b1bd0ae12a27","name":"cURL command","source":"6454b1bd0ae12a27.txt","type":"text/plain","size":422}],"parameters":[{"name":"url","value":"'/api/v1/users'"},{"name":"json","value":"{'email': 'garciaraven@example.org', 'password': 'y%l3BwF&^&', 'lastName': 'Johnson', 'firstName': 'Morgan', 'middleName': 'Anthony'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateUserRequestSchema(email='garciaraven@example.org', password='y%l3BwF&^&', last_name='Johnson', first_name='Morgan', middle_name='Anthony')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"exercises_client","time":{"start":1754319657216,"stop":1754319657791,"duration":575},"status":"passed","steps":[{"name":"Authenticate user","time":{"start":1754319657238,"stop":1754319657759,"duration":521},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/authentication/login'","time":{"start":1754319657238,"stop":1754319657759,"duration":521},"status":"passed","steps":[],"attachments":[{"uid":"4f2791788156b450","name":"cURL command","source":"4f2791788156b450.txt","type":"text/plain","size":371}],"parameters":[{"name":"url","value":"'/api/v1/authentication/login'"},{"name":"json","value":"{'email': 'garciaraven@example.org', 'password': 'y%l3BwF&^&'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"LoginRequestSchema(email='garciaraven@example.org', password='y%l3BwF&^&')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"function_file","time":{"start":1754319657791,"stop":1754319657802,"duration":11},"status":"passed","steps":[{"name":"Create file","time":{"start":1754319657791,"stop":1754319657802,"duration":11},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/files'","time":{"start":1754319657792,"stop":1754319657802,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"cefef289652919b9","name":"cURL command","source":"cefef289652919b9.txt","type":"text/plain","size":567}],"parameters":[{"name":"url","value":"'/api/v1/files'"},{"name":"json","value":"None"},{"name":"data","value":"{'filename': '07d7f81f-8552-416c-99cf-68cf7d139c25.png', 'directory': 'tests'}"},{"name":"files","value":"{'upload_file': <_io.BufferedReader name='./testdata/files/image.png'>}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateFileRequestSchema(filename='07d7f81f-8552-416c-99cf-68cf7d139c25.png', directory='tests', upload_file='./testdata/files/image.png')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"files_client","time":{"start":1754319657791,"stop":1754319657791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"courses_client","time":{"start":1754319657791,"stop":1754319657791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_course","time":{"start":1754319657802,"stop":1754319657818,"duration":16},"status":"passed","steps":[{"name":"Create course","time":{"start":1754319657803,"stop":1754319657818,"duration":15},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/courses'","time":{"start":1754319657803,"stop":1754319657818,"duration":15},"status":"passed","steps":[],"attachments":[{"uid":"2825d39930ba941a","name":"cURL command","source":"2825d39930ba941a.txt","type":"text/plain","size":871}],"parameters":[{"name":"url","value":"'/api/v1/courses'"},{"name":"json","value":"{'title': 'Particular become miss list test.', 'maxScore': 95, 'minScore': 19, 'description': 'Good southern herself child. Matter phone including resource board bit music.\\nImpact there popular into memory.', 'estimatedTime': '9 weeks', 'previewFileId': '3e975da1-587b-4662-a4a6-bb5dc09cdb7b', 'createdByUserId': '65d4e7a2-95a5-4562-a87e-d963577e8752'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateCourseRequestSchema(title='Particular become miss list test.', max_score=95, min_score=19, description='Good southern herself child. Matter phone including resource board bit music.\\nImpact there popular into memory.', estimated_time='9 weeks', preview_file_id='3e975da1-587b-4662-a4a6-bb5dc09cdb7b', created_by_user_id='65d4e7a2-95a5-4562-a87e-d963577e8752')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"function_exercise","time":{"start":1754319657818,"stop":1754319658099,"duration":281},"status":"passed","steps":[{"name":"Create exercise","time":{"start":1754319657819,"stop":1754319658099,"duration":280},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/exercises'","time":{"start":1754319657819,"stop":1754319658098,"duration":279},"status":"passed","steps":[],"attachments":[{"uid":"cc326cfa887e1fc","name":"cURL command","source":"cc326cfa887e1fc.txt","type":"text/plain","size":842}],"parameters":[{"name":"url","value":"'/api/v1/exercises'"},{"name":"json","value":"{'title': 'Purpose program fly painting.', 'courseId': 'a254d770-658d-4559-917e-7f00525f4e40', 'maxScore': 56, 'minScore': 23, 'orderIndex': 9, 'description': 'Dream music training paper just claim. Reach produce consider college public me assume beat. Be ask west hope man station than whom.', 'estimatedTime': '6 weeks'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateExerciseRequestSchema(title='Purpose program fly painting.', course_id='a254d770-658d-4559-917e-7f00525f4e40', max_score=56, min_score=23, order_index=9, description='Dream music training paper just claim. Reach produce consider college public me assume beat. Be ask west hope man station than whom.', estimated_time='6 weeks')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"\n        Тест обновления данных задания по его ID.\n        Выполняет PATCH-запрос к /api/v1/exercises/{exercise_id}.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, содержащая данные созданного задания.\n        ","status":"failed","statusMessage":"AssertionError: Incorrect response status code. Expected status code: 200. Actual status code: 500","statusTrace":"self = <tests.exercises.test_exercises.TestExercises object at 0x7f3950ded850>\nexercises_client = <clients.exercises.exercises_client.ExercisesClient object at 0x7f3950e16f90>\nfunction_exercise = ExerciseFixture(request=CreateExerciseRequestSchema(title='Purpose program fly painting.', course_id='a254d770-658d-45...h produce consider college public me assume beat. Be ask west hope man station than whom.', estimated_time='6 weeks')))\n\n    @allure.tag(AllureTag.UPDATE_ENTITY)\n    @allure.story(AllureStory.UPDATE_ENTITY)  # Добавили story\n    @allure.title(\"Update exercise\")\n    @allure.severity(Severity.CRITICAL)\n    @allure.sub_suite(AllureStory.UPDATE_ENTITY)\n    def test_update_exercise(\n            self,\n            exercises_client: ExercisesClient,\n            function_exercise: ExerciseFixture # Используем фикстуру, которая создает задание\n    ):\n        \"\"\"\n        Тест обновления данных задания по его ID.\n        Выполняет PATCH-запрос к /api/v1/exercises/{exercise_id}.\n        Проверяет статус-код, тело ответа и JSON-схему.\n        :param exercises_client: Клиент для работы с заданиями.\n        :param function_exercise: Фикстура, содержащая данные созданного задания.\n        \"\"\"\n        # 1. Получаем ID задания из фикстуры\n        exercise_id = function_exercise.response.exercise.id\n        print(f\"Updating exercise with ID: {exercise_id}\")\n    \n        # 2. Формируем данные для обновления задания\n        # Обновим, например, title и description\n        update_request = UpdateExerciseRequestSchema(\n            title=\"Новое название задания\",\n            description=\"Новое описание задания\"\n            # Остальные поля остаются None и не будут отправлены в запросе\n            # благодаря exclude_none=True в update_exercise_api\n        )\n        # print(f\"Update request JSON being prepared: {json.dumps(update_request.model_dump(by_alias=True, exclude_none=True), indent=2, ensure_ascii=False)}\")\n        # print(f\"Update request JSON being sent: {json.dumps(update_request.model_dump(by_alias=True), indent=2, ensure_ascii=False)}\")\n    \n        # 3. Отправляем PATCH-запрос на обновление задания\n        # Используем метод, возвращающий httpx.Response\n        response_api = exercises_client.update_exercise_api(exercise_id, update_request)\n        # print(f\"Response status code: {response_api.status_code}\")\n        # print(f\"Response text: {response_api.text}\")\n    \n        # 4. Проверяем статус-код ответа\n>       assert_status_code(response_api.status_code, HTTPStatus.OK)\n\ntests/exercises/test_exercises.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 500, expected = <HTTPStatus.OK: 200>\n\n    @allure.step(\"Check that response status code equals to {expected}\")\n    def assert_status_code(actual: int, expected: int):\n        \"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому.\n    \n        :param actual: Фактический статус-код ответа.\n        :param expected: Ожидаемый статус-код.\n        :raises AssertionError: Если статус-коды не совпадают.\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n    \n>       assert actual == expected, (\n            f'Incorrect response status code. '\n            f'Expected status code: {expected}. '\n            f'Actual status code: {actual}'\n        )\nE       AssertionError: Incorrect response status code. Expected status code: 200. Actual status code: 500\n\ntools/assertions/base.py:17: AssertionError","steps":[{"name":"Update exercise","time":{"start":1754319658100,"stop":1754319658109,"duration":9},"status":"passed","steps":[{"name":"Make PATCH request to '/api/v1/exercises/fde9fe79-aee2-486d-8be6-c02e409570f9'","time":{"start":1754319658100,"stop":1754319658109,"duration":9},"status":"passed","steps":[],"attachments":[{"uid":"aa05b99fa34a71d1","name":"cURL command","source":"aa05b99fa34a71d1.txt","type":"text/plain","size":684}],"parameters":[{"name":"url","value":"'/api/v1/exercises/fde9fe79-aee2-486d-8be6-c02e409570f9'"},{"name":"json","value":"{'title': 'Новое название задания', 'description': 'Новое описание задания'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"exercise_id","value":"'fde9fe79-aee2-486d-8be6-c02e409570f9'"},{"name":"request","value":"UpdateExerciseRequestSchema(title='Новое название задания', course_id=None, max_score=None, min_score=None, order_index=None, description='Новое описание задания', estimated_time=None)"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equals to <HTTPStatus.OK: 200>","time":{"start":1754319658109,"stop":1754319658110,"duration":1},"status":"failed","statusMessage":"AssertionError: Incorrect response status code. Expected status code: 200. Actual status code: 500\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests-api/autotests-api/tools/assertions/base.py\", line 17, in assert_status_code\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"500"},{"name":"expected","value":"<HTTPStatus.OK: 200>"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1927e1468d0b69a","name":"log","source":"1927e1468d0b69a.txt","type":"text/plain","size":1389}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"save_allure_environment_file::0","time":{"start":1754319664596,"stop":1754319664597,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"LMS service"},{"name":"epic","value":"LMS service"},{"name":"severity","value":"critical"},{"name":"subSuite","value":"Update entity"},{"name":"suite","value":"Exercises"},{"name":"tag","value":"UPDATE_ENTITY"},{"name":"tag","value":"REGRESSION"},{"name":"feature","value":"Exercises"},{"name":"story","value":"Update entity"},{"name":"tag","value":"EXERCISES"},{"name":"tag","value":"regression"},{"name":"tag","value":"exercises"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2563-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.exercises.test_exercises"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"f1f8101498b263fe","reportUrl":"https://avaoleh.github.io/autotests-api/1//#testresult/f1f8101498b263fe","status":"broken","statusDetails":"AttributeError: 'str' object has no attribute 'read_bytes'","time":{"start":1754319072976,"stop":1754319072976,"duration":0}}]},"tags":["REGRESSION","exercises","regression","UPDATE_ENTITY","EXERCISES"]},"source":"235f0f677c55dda9.json","parameterValues":[]}